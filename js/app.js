// Generated by CoffeeScript 1.6.2
(function() {
  var App, app, isMobile,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  App = (function() {
    App.prototype.particleCount = 1000;

    function App(container, isMobile) {
      this.container = container;
      if (isMobile == null) {
        isMobile = false;
      }
      this.gameLoop = __bind(this.gameLoop, this);
      this.onResize = __bind(this.onResize, this);
      this.scene = new THREE.Scene();
      this.scene.fog = new THREE.FogExp2(0x000000, 0.0015);
      this.clock = new THREE.Clock();
      this.initRenderer();
      this.initCamera();
      if (isMobile) {
        this.stereoEffect = new THREE.StereoEffect(this.renderer);
        this.stereoEffect.separation = 1;
        this.initDeviceOrientationControls();
      } else {
        this.initOrbitControls();
      }
      this.addGroundToScene(this.scene);
      this.addLightToScene(this.scene);
      this.addSkydomeToScene(this.scene);
      this.addGlowDotsToScene(this.scene);
      this.gameLoop();
      window.addEventListener('resize', this.onResize, false);
      setTimeout(this.onResize, 1);
    }

    App.prototype.initRenderer = function() {
      var element;

      this.renderer = new THREE.WebGLRenderer();
      element = this.renderer.domElement;
      return this.container.appendChild(element);
    };

    App.prototype.initCamera = function() {
      this.camera = new THREE.PerspectiveCamera(90, 1, 0.001, 700);
      this.camera.position.set(0, 15, 0);
      return this.scene.add(this.camera);
    };

    App.prototype.initOrbitControls = function() {
      this.controls = new THREE.OrbitControls(this.camera, this.container);
      this.controls.rotateUp(Math.PI / 4);
      this.controls.target.set(this.camera.position.x + .1, this.camera.position.y, this.camera.position.z);
      this.controls.noZoom = true;
      return this.controls.noPan = true;
    };

    App.prototype.initDeviceOrientationControls = function() {
      this.controls = new THREE.DeviceOrientationControls(this.camera, true);
      return this.controls.connect();
    };

    App.prototype.onResize = function(e) {
      var height, width;

      width = this.container.offsetWidth;
      height = this.container.offsetHeight;
      this.camera.aspect = width / height;
      this.camera.updateProjectionMatrix();
      if (this.stereoEffect) {
        this.stereoEffect.setSize(width, height);
      }
      return this.renderer.setSize(width, height);
    };

    App.prototype.addGroundToScene = function(scene) {
      var geometry, material, mesh;

      geometry = new THREE.PlaneGeometry(1000, 1000);
      material = new THREE.MeshPhongMaterial({
        color: 0xffffff,
        specular: 0x000000,
        shininess: 10,
        shading: THREE.FlatShading,
        blending: THREE.AdditiveBlending,
        transparent: true,
        map: this.getGroundTexture()
      });
      if (!(material.map instanceof THREE.Texture)) {
        throw "Warning: no ground texture found!";
      }
      mesh = new THREE.Mesh(geometry, material);
      mesh.rotation.x = -Math.PI / 2;
      return scene.add(mesh);
    };

    App.prototype.addLightToScene = function(scene) {
      var light;

      light = new THREE.HemisphereLight(0x777777, 0x000000, 0.6);
      return scene.add(light);
    };

    App.prototype.addSkydomeToScene = function(scene) {
      var geometry, material, mesh;

      geometry = new THREE.SphereGeometry(600, 60, 40);
      material = new THREE.MeshBasicMaterial({
        map: this.getSkyTexture(),
        side: THREE.BackSide
      });
      mesh = new THREE.Mesh(geometry, material);
      return scene.add(mesh);
    };

    App.prototype.addGlowDotsToScene = function(scene) {
      var i, material, particle, particles, x, z, _i, _ref, _ref1, _ref2;

      particles = new THREE.Geometry();
      material = new THREE.PointCloudMaterial({
        map: this.getGlowDotTexture(),
        color: 0xffffff,
        blending: THREE.AdditiveBlending,
        depthWrite: false,
        transparent: true
      });
      for (i = _i = 0, _ref = this.particleCount; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        x = Math.random() * 40 - 20;
        x += (_ref1 = x > 0) != null ? _ref1 : {
          15: -15
        };
        z = Math.random() * 40 - 20;
        z += (_ref2 = z > 0) != null ? _ref2 : {
          15: -15
        };
        particle = new THREE.Vector3(x, this.camera.position.y, z);
        particle.phi = Math.random() * 1000;
        particle.amp = Math.random() * 2 + 1;
        particles.vertices.push(particle);
      }
      this.pointCloud = new THREE.PointCloud(particles, material);
      return scene.add(this.pointCloud);
    };

    App.prototype.getGroundTexture = function() {
      var texture;

      texture = THREE.ImageUtils.loadTexture('./textures/patterns/checker.png');
      texture.wrapS = THREE.RepeatWrapping;
      texture.wrapT = THREE.RepeatWrapping;
      texture.repeat = new THREE.Vector2(50, 50);
      texture.anisotropy = this.renderer.getMaxAnisotropy();
      return texture;
    };

    App.prototype.getSkyTexture = function() {
      var texture;

      texture = THREE.ImageUtils.loadTexture('./textures/environments/milky_way.jpg');
      return texture;
    };

    App.prototype.getGlowDotTexture = function() {
      var texture;

      texture = THREE.ImageUtils.loadTexture('./textures/lensflare/lensflare0.png');
      return texture;
    };

    App.prototype.gameLoop = function() {
      var dt, et;

      requestAnimationFrame(this.gameLoop);
      dt = this.clock.getDelta();
      et = this.clock.getElapsedTime();
      this.update(dt, et);
      return this.render(dt, et);
    };

    App.prototype.update = function(dt, et) {
      var vertex, _i, _len, _ref;

      if (this.controls) {
        this.controls.update(dt);
      }
      _ref = this.pointCloud.geometry.vertices;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        vertex = _ref[_i];
        vertex.y = this.camera.position.y + Math.sin(et - vertex.phi) * vertex.amp;
      }
      return this.pointCloud.geometry.verticesNeedUpdate = true;
    };

    App.prototype.render = function(dt, et) {
      if (this.stereoEffect) {
        return this.stereoEffect.render(this.scene, this.camera);
      } else {
        return this.renderer.render(this.scene, this.camera);
      }
    };

    return App;

  })();

  isMobile = function() {
    return /Android|iPhone|iPad|iPod|BlackBerry|Windows Phone/i.test(navigator.userAgent || navigator.vendor || window.opera);
  };

  app = new App(document.getElementById('threejs-container'), isMobile());

}).call(this);
